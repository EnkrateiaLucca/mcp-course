#!/usr/bin/env python3
"""
Google ADK Agent with MCP Integration Demo

This example shows how to create an ADK agent that can use tools from MCP servers,
demonstrating the integration between Google's Agent Development Kit and the 
Model Context Protocol.

Based on:
- ADK Documentation: https://google.github.io/adk-docs/
- ADK MCP Tools Guide: https://google.github.io/adk-docs/tools/mcp-tools/
"""

import asyncio
import logging
from typing import Dict, Any, List
import os

# ADK imports
from adk.agents import LlmAgent
from adk.tools import MCPToolset, FunctionTool
from adk.models import VertexAIGeminiModel
from adk.runners import Runner

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WeatherAgent:
    """
    ADK Agent that uses MCP servers to access weather data and other external services.
    Demonstrates how MCPToolset integrates MCP tools into ADK workflows.
    """
    
    def __init__(self, project_id: str):
        self.project_id = project_id
        self.agent = None
        self.runner = None
        
    async def setup_agent(self):
        """Set up the ADK agent with MCP tool integration."""
        
        # Configure the LLM model (Gemini via Vertex AI)
        model = VertexAIGeminiModel(
            model_name="gemini-2.0-flash",
            project_id=self.project_id,
            location="us-central1"
        )
        
        # Create MCP toolsets for different servers
        weather_toolset = MCPToolset(
            name="weather_tools",
            server_config={
                "command": "python",
                "args": ["weather_mcp_server.py"],
                "transport": "stdio"
            },
            tool_filter=["get_weather", "get_forecast"]  # Only expose specific tools
        )
        
        database_toolset = MCPToolset(
            name="database_tools", 
            server_config={
                "command": "python",
                "args": ["database_mcp_server.py"],
                "transport": "stdio"
            }
        )
        
        # Create a native ADK tool for demonstration
        def format_response(response: str, format_type: str = "markdown") -> str:
            """Format a response in the specified format."""
            if format_type == "markdown":
                return f"## Response\n\n{response}\n\n*Generated by ADK Agent*"
            elif format_type == "json":
                return f'{{"response": "{response}", "generated_by": "ADK Agent"}}'
            else:
                return response
                
        format_tool = FunctionTool.from_function(
            function=format_response,
            name="format_response",
            description="Format responses in different styles"
        )
        
        # Create the main agent with MCP and native tools
        self.agent = LlmAgent(
            name="WeatherAssistant",
            instructions="""You are a helpful weather assistant that can:
            
1. Get current weather information for any location
2. Provide weather forecasts
3. Query weather-related data from databases
4. Format responses in different styles

When users ask about weather, use the appropriate MCP tools to get accurate, 
real-time information. Always format your responses clearly and provide 
helpful context.

Available tools:
- Weather tools (via MCP): get_weather, get_forecast
- Database tools (via MCP): query_weather_history, get_location_info
- Native tools: format_response

Be conversational and helpful in your responses.""",
            model=model,
            tools=[weather_toolset, database_toolset, format_tool]
        )
        
        # Create a runner to execute the agent
        self.runner = Runner(agent=self.agent)
        
        logger.info("ADK Agent with MCP integration set up successfully!")
        
    async def run_conversation(self, user_input: str) -> str:
        """Run a conversation with the agent."""
        if not self.agent:
            await self.setup_agent()
            
        try:
            # Execute the agent with user input
            result = await self.runner.run(
                user_message=user_input,
                session_id="demo_session"
            )
            
            return result.get_last_message().content
            
        except Exception as e:
            logger.error(f"Error running agent: {e}")
            return f"Sorry, I encountered an error: {str(e)}"

class MultiAgentSystem:
    """
    Demonstrates a multi-agent system where different agents specialize 
    in different tasks using MCP tools.
    """
    
    def __init__(self, project_id: str):
        self.project_id = project_id
        self.weather_agent = None
        self.data_agent = None
        self.coordinator = None
        
    async def setup_agents(self):
        """Set up specialized agents."""
        
        model = VertexAIGeminiModel(
            model_name="gemini-2.0-flash",
            project_id=self.project_id,
            location="us-central1"
        )
        
        # Weather specialist agent
        weather_toolset = MCPToolset(
            name="weather_tools",
            server_config={
                "command": "python",
                "args": ["weather_mcp_server.py"],
                "transport": "stdio"
            }
        )
        
        self.weather_agent = LlmAgent(
            name="WeatherSpecialist",
            instructions="You specialize in weather information. Use MCP weather tools to provide accurate forecasts and current conditions.",
            model=model,
            tools=[weather_toolset]
        )
        
        # Data specialist agent
        database_toolset = MCPToolset(
            name="database_tools",
            server_config={
                "command": "python", 
                "args": ["database_mcp_server.py"],
                "transport": "stdio"
            }
        )
        
        self.data_agent = LlmAgent(
            name="DataSpecialist",
            instructions="You specialize in data queries and analysis. Use MCP database tools to retrieve and analyze information.",
            model=model,
            tools=[database_toolset]
        )
        
        # Coordinator agent (using other agents as tools)
        from adk.tools import AgentTool
        
        weather_agent_tool = AgentTool(
            agent=self.weather_agent,
            name="weather_specialist",
            description="Delegate weather-related queries to the weather specialist"
        )
        
        data_agent_tool = AgentTool(
            agent=self.data_agent,
            name="data_specialist", 
            description="Delegate data queries to the data specialist"
        )
        
        self.coordinator = LlmAgent(
            name="Coordinator",
            instructions="""You are a coordinator agent that helps users by delegating tasks to specialist agents.
            
When users ask about:
- Weather, forecasts, or climate: Use the weather_specialist
- Data queries, analysis, or historical information: Use the data_specialist

Provide a unified response that combines information from specialists.""",
            model=model,
            tools=[weather_agent_tool, data_agent_tool]
        )
        
        logger.info("Multi-agent system set up successfully!")
        
    async def run_coordinated_task(self, user_input: str) -> str:
        """Run a task through the coordinated multi-agent system."""
        if not self.coordinator:
            await self.setup_agents()
            
        try:
            runner = Runner(agent=self.coordinator)
            result = await runner.run(
                user_message=user_input,
                session_id="multi_agent_session"
            )
            
            return result.get_last_message().content
            
        except Exception as e:
            logger.error(f"Error in multi-agent system: {e}")
            return f"Sorry, I encountered an error: {str(e)}"

async def demo_simple_agent():
    """Demonstrate a simple ADK agent with MCP integration."""
    print("\n🤖 ADK + MCP Simple Agent Demo")
    print("=" * 50)
    
    project_id = os.getenv("GOOGLE_CLOUD_PROJECT")
    if not project_id:
        print("Please set GOOGLE_CLOUD_PROJECT environment variable")
        return
        
    agent = WeatherAgent(project_id)
    
    # Test queries
    test_queries = [
        "What's the weather like in New York?",
        "Can you give me a 5-day forecast for San Francisco?",
        "What was the weather like in London last week?"
    ]
    
    for query in test_queries:
        print(f"\n👤 User: {query}")
        response = await agent.run_conversation(query)
        print(f"🤖 Agent: {response}")

async def demo_multi_agent_system():
    """Demonstrate multi-agent coordination with MCP tools."""
    print("\n🤖🤖 ADK + MCP Multi-Agent System Demo")
    print("=" * 50)
    
    project_id = os.getenv("GOOGLE_CLOUD_PROJECT")
    if not project_id:
        print("Please set GOOGLE_CLOUD_PROJECT environment variable")
        return
        
    system = MultiAgentSystem(project_id)
    
    # Test complex queries that require coordination
    test_queries = [
        "Compare today's weather in Paris with the historical average for this time of year",
        "What's the weather forecast for my business trip to Tokyo next week?",
        "Analyze weather patterns and provide recommendations for outdoor event planning"
    ]
    
    for query in test_queries:
        print(f"\n👤 User: {query}")
        response = await system.run_coordinated_task(query)
        print(f"🤖 Coordinator: {response}")

async def demo_mcp_toolset_features():
    """Demonstrate specific MCPToolset features."""
    print("\n🔧 MCPToolset Features Demo")
    print("=" * 50)
    
    # Show how to configure MCPToolset with different options
    print("1. Basic MCPToolset configuration:")
    basic_config = {
        "command": "python",
        "args": ["weather_mcp_server.py"],
        "transport": "stdio"
    }
    print(f"   {basic_config}")
    
    print("\n2. MCPToolset with tool filtering:")
    filtered_config = {
        "name": "filtered_weather_tools",
        "server_config": basic_config,
        "tool_filter": ["get_weather", "get_forecast"]  # Only expose specific tools
    }
    print(f"   Tool filter: {filtered_config['tool_filter']}")
    
    print("\n3. MCPToolset with HTTP/SSE transport:")
    http_config = {
        "name": "remote_weather_tools",
        "server_config": {
            "url": "http://localhost:8000/mcp",
            "transport": "http_sse"
        }
    }
    print(f"   HTTP config: {http_config}")
    
    print("\n4. Multiple MCPToolsets in one agent:")
    print("   - Weather tools from stdio server")
    print("   - Database tools from stdio server") 
    print("   - Search tools from HTTP server")
    print("   - Native ADK tools")

async def main():
    """Main demo function."""
    print("🚀 Google ADK + MCP Integration Demo")
    print("=" * 50)
    print("This demo shows how to build agents using Google's Agent Development Kit")
    print("that can leverage tools from MCP servers for enhanced capabilities.")
    
    # Check prerequisites
    if not os.getenv("GOOGLE_CLOUD_PROJECT"):
        print("\n❌ Missing GOOGLE_CLOUD_PROJECT environment variable")
        print("Please set it to your Google Cloud project ID:")
        print("export GOOGLE_CLOUD_PROJECT='your-project-id'")
        return
    
    try:
        # Run demos
        await demo_mcp_toolset_features()
        await demo_simple_agent()
        await demo_multi_agent_system()
        
        print("\n✅ All ADK + MCP demos completed!")
        print("\nKey Takeaways:")
        print("- MCPToolset automatically discovers and adapts MCP tools for ADK")
        print("- Tool filtering allows exposing only specific MCP capabilities")
        print("- Multi-agent systems can coordinate using MCP tools")
        print("- ADK integrates seamlessly with Vertex AI and Google Cloud")
        
    except ImportError as e:
        print(f"\n❌ Missing dependencies: {e}")
        print("Please install ADK and other requirements:")
        print("pip install -r requirements.txt")
        
    except Exception as e:
        print(f"\n❌ Error running demo: {e}")
        print("Make sure MCP servers are available and Google Cloud is configured.")

if __name__ == "__main__":
    asyncio.run(main())
